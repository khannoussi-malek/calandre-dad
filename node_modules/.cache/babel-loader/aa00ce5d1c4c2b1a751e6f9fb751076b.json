{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malek\\\\Desktop\\\\tbiby\\\\calandre\\\\src\\\\components\\\\calandre\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calandre(props) {\n  _s();\n\n  const {\n    rowNumber\n  } = props;\n  const Hours = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"]; //to get format yyy-mm-ddThh:mm:ss\n  // .toISOString().slice(0, 19)\n\n  const [date, setDate] = useState(new Date());\n\n  const addDays = (date, days) => {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  };\n\n  const headerDates = []; //make header\n\n  for (let i = 0; i < rowNumber; i++) {\n    i === 0 ? headerDates.push(date) : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\n  }\n\n  const jsxHeader = [];\n\n  for (const [index, value] of headerDates.entries()) {\n    jsxHeader.push( /*#__PURE__*/_jsxDEV(Box, {\n      w: \"100%\",\n      bg: \"blue.500\",\n      h: \"160px\",\n      h: 10,\n      children: value.toISOString().slice(0, 10)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    templateColumns: \"repeat(6, 1fr)\",\n    gap: 0,\n    children: [/*#__PURE__*/_jsxDEV(GridItem, {\n      colSpan: 5,\n      bg: \"blue\",\n      children: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n      colSpan: 5,\n      w: \"100%\",\n      bg: \"red\",\n      children: \"2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calandre, \"rW+rxy2mJ1oFEB1Cqg4Z2uVJym0=\");\n\n_c = Calandre;\nexport default Calandre;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calandre\");","map":{"version":3,"sources":["C:/Users/malek/Desktop/tbiby/calandre/src/components/calandre/index.jsx"],"names":["Box","Center","Grid","GridItem","useState","Calandre","props","rowNumber","Hours","date","setDate","Date","addDays","days","result","getDate","headerDates","i","push","length","jsxHeader","index","value","entries","toISOString","slice"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,QAA5B,QAA4C,mBAA5C;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,KAAtB;AACA,QAAME,KAAK,GAAG,CACZ,OADY,EAEZ,OAFY,EAGZ,OAHY,EAIZ,OAJY,EAKZ,OALY,EAMZ,OANY,EAOZ,OAPY,EAQZ,OARY,EASZ,OATY,EAUZ,OAVY,EAWZ,OAXY,EAYZ,OAZY,EAaZ,OAbY,EAcZ,OAdY,EAeZ,OAfY,EAgBZ,OAhBY,EAiBZ,OAjBY,EAkBZ,OAlBY,EAmBZ,OAnBY,EAoBZ,OApBY,EAqBZ,OArBY,EAsBZ,OAtBY,EAuBZ,OAvBY,EAwBZ,OAxBY,CAAd,CAFuB,CA6BvB;AACA;;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAIO,IAAJ,EAAD,CAAhC;;AAEA,QAAMC,OAAO,GAAG,CAACH,IAAD,EAAOI,IAAP,KAAgB;AAC9B,QAAIC,MAAM,GAAG,IAAIH,IAAJ,CAASF,IAAT,CAAb;AACAK,IAAAA,MAAM,CAACJ,OAAP,CAAeI,MAAM,CAACC,OAAP,KAAmBF,IAAlC;AACA,WAAOC,MAAP;AACD,GAJD;;AAMA,QAAME,WAAW,GAAG,EAApB,CAxCuB,CAyCvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAApB,EAA+BU,CAAC,EAAhC,EAAoC;AAClCA,IAAAA,CAAC,KAAK,CAAN,GACID,WAAW,CAACE,IAAZ,CAAiBT,IAAjB,CADJ,GAEIO,WAAW,CAACE,IAAZ,CAAiBN,OAAO,CAACI,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAZ,EAAsC,CAAtC,CAAxB,CAFJ;AAGD;;AACD,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,MAAM,CAACC,KAAD,EAAQC,KAAR,CAAX,IAA6BN,WAAW,CAACO,OAAZ,EAA7B,EAAoD;AAClDH,IAAAA,SAAS,CAACF,IAAV,eACE,QAAC,GAAD;AAAK,MAAA,CAAC,EAAC,MAAP;AAAc,MAAA,EAAE,EAAC,UAAjB;AAA4B,MAAA,CAAC,EAAC,OAA9B;AAAkD,MAAA,CAAC,EAAE,EAArD;AAAA,gBACGI,KAAK,CAACE,WAAN,GAAoBC,KAApB,CAA0B,CAA1B,EAA6B,EAA7B;AADH,OAA2CJ,KAA3C;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,sBACE,QAAC,IAAD;AAAM,IAAA,eAAe,EAAC,gBAAtB;AAAuC,IAAA,GAAG,EAAE,CAA5C;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,OAAO,EAAE,CAAnB;AAAsB,MAAA,EAAE,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE,QAAC,QAAD;AAAU,MAAA,OAAO,EAAE,CAAnB;AAAsB,MAAA,CAAC,EAAC,MAAxB;AAA+B,MAAA,EAAE,EAAC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GAlFQhB,Q;;KAAAA,Q;AAoFT,eAAeA,QAAf","sourcesContent":["import { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Calandre(props) {\r\n  const { rowNumber } = props;\r\n  const Hours = [\r\n    \"00:00\",\r\n    \"01:00\",\r\n    \"02:00\",\r\n    \"03:00\",\r\n    \"04:00\",\r\n    \"05:00\",\r\n    \"06:00\",\r\n    \"07:00\",\r\n    \"08:00\",\r\n    \"09:00\",\r\n    \"10:00\",\r\n    \"11:00\",\r\n    \"12:00\",\r\n    \"13:00\",\r\n    \"14:00\",\r\n    \"15:00\",\r\n    \"16:00\",\r\n    \"17:00\",\r\n    \"18:00\",\r\n    \"19:00\",\r\n    \"20:00\",\r\n    \"21:00\",\r\n    \"22:00\",\r\n    \"23:00\",\r\n  ];\r\n\r\n  //to get format yyy-mm-ddThh:mm:ss\r\n  // .toISOString().slice(0, 19)\r\n\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  const headerDates = [];\r\n  //make header\r\n  for (let i = 0; i < rowNumber; i++) {\r\n    i === 0\r\n      ? headerDates.push(date)\r\n      : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\r\n  }\r\n  const jsxHeader = [];\r\n  for (const [index, value] of headerDates.entries()) {\r\n    jsxHeader.push(\r\n      <Box w=\"100%\" bg=\"blue.500\" h=\"160px\" key={index} h={10}>\r\n        {value.toISOString().slice(0, 10)}\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <Grid templateColumns=\"repeat(6, 1fr)\" gap={0}>\r\n      <GridItem colSpan={5} bg=\"blue\">\r\n        1\r\n        {/* <Box w=\"100%\" bg=\"blue.500\">\r\n          <Center h=\"160px\" bg=\"red.500\">\r\n            /\r\n          </Center>\r\n          {Hours.map((value) => (\r\n            <Center h=\"160px\" key={value} fontSize=\"20px\">\r\n              {value}\r\n            </Center>\r\n          ))}\r\n        </Box> */}\r\n      </GridItem>\r\n      <GridItem colSpan={5} w=\"100%\" bg=\"red\">\r\n        2\r\n        {/* <Grid\r\n          w=\"100%\"\r\n          templateColumns={\"repeat(\" + (parseInt(rowNumber) + 1) + \", 1fr)\"}\r\n          gap={1}\r\n        >\r\n          {jsxHeader}\r\n        </Grid> */}\r\n      </GridItem>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Calandre;\r\n"]},"metadata":{},"sourceType":"module"}