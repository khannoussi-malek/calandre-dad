{"ast":null,"code":"var _jsxFileName = \"C:\\\\pfe\\\\calandre\\\\calandre-dad\\\\src\\\\components\\\\calandre\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport TimeElement from \"./timeElement\";\nimport { AlertDialog, AlertDialogBody, AlertDialogCloseButton, AlertDialogContent, AlertDialogFooter, AlertDialogHeader, AlertDialogOverlay } from \"@chakra-ui/modal\";\nimport { useDisclosure } from \"@chakra-ui/hooks\"; // import Task from \"./taks/index\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calandre(props) {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const cancelRef = React.useRef();\n  const [currentDateStart, setCurrentDateStart] = useState(\"\");\n  const [start, setstartt] = useState(\"\");\n  const [end, setend] = useState(\"\");\n  const {\n    rowNumber\n  } = props;\n  const Hours = [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"];\n\n  const addtaks = (start, end) => {\n    id = id + 1;\n    setstartt(start);\n    setend(end);\n    setCurrentDateStart(start);\n    onOpen();\n  };\n\n  const restOfConfirmation = (start, end) => {\n    setTask(task => [...task, {\n      id,\n      start,\n      end\n    }]);\n    onClose();\n  }; //to get format yyy-mm-ddThh:mm:ss\n  // .toISOString().slice(0, 19)\n\n\n  const [date] = useState(new Date());\n  const [task, setTask] = useState([{\n    start: \"2021-03-22T00:00\"\n  }]);\n  let id = 0;\n\n  const addToDOM = () => {// task.forEach((element) => console.log(element));\n  };\n\n  const addDays = (date, days) => {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  };\n\n  const headerDates = []; //make header\n\n  for (let i = 0; i < rowNumber; i++) {\n    i === 0 ? headerDates.push(date) : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\n  }\n\n  const contenu = [];\n\n  for (const [index, value] of headerDates.entries()) {\n    contenu.push( /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Center, {\n        w: \"100%\",\n        border: \"1px\",\n        borderColor: \"gray.200\",\n        bgColor: \"gray.300\",\n        h: 10,\n        align: \"center\",\n        children: value.toISOString().slice(0, 10)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), Hours.map(HoursValue => /*#__PURE__*/_jsxDEV(TimeElement, {\n        HoursValue: HoursValue,\n        value: value,\n        addtaks: addtaks,\n        task: task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => addToDOM(),\n      children: \"ok\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      templateColumns: \"repeat(6, 1fr)\",\n      gap: 0,\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 1,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          w: \"100%\",\n          bgColor: \"gray.400\",\n          children: [/*#__PURE__*/_jsxDEV(Center, {\n            h: 10,\n            align: \"center\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), Hours.map(value => /*#__PURE__*/_jsxDEV(Center, {\n            border: \"1px\",\n            borderColor: \"gray.200\",\n            bgColor: \"gray.400\",\n            h: \"160px\",\n            fontSize: \"20px\",\n            children: value\n          }, value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        colSpan: 5,\n        w: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          w: \"100%\",\n          templateColumns: \"repeat(\" + parseInt(rowNumber) + \", 1fr)\",\n          gap: 0,\n          children: contenu\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertDialog, {\n      motionPreset: \"slideInBottom\",\n      leastDestructiveRef: cancelRef,\n      onClose: onClose,\n      isOpen: isOpen,\n      isCentered: true,\n      children: [/*#__PURE__*/_jsxDEV(AlertDialogOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AlertDialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(AlertDialogHeader, {\n          children: \"Confirmer la r\\xE9servation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AlertDialogCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AlertDialogBody, {\n          children: [\"hooo\", currentDateStart]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AlertDialogFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            ref: cancelRef,\n            onClick: onClose,\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"red\",\n            onClick: () => restOfConfirmation(start, end),\n            ml: 3,\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calandre, \"TZvMF3B6zAkFGz5AHtN83a+eT3I=\", false, function () {\n  return [useDisclosure];\n});\n\n_c = Calandre;\nexport default Calandre;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calandre\");","map":{"version":3,"sources":["C:/pfe/calandre/calandre-dad/src/components/calandre/index.jsx"],"names":["React","Button","Box","Center","Grid","GridItem","useState","TimeElement","AlertDialog","AlertDialogBody","AlertDialogCloseButton","AlertDialogContent","AlertDialogFooter","AlertDialogHeader","AlertDialogOverlay","useDisclosure","Calandre","props","isOpen","onOpen","onClose","cancelRef","useRef","currentDateStart","setCurrentDateStart","start","setstartt","end","setend","rowNumber","Hours","addtaks","id","restOfConfirmation","setTask","task","date","Date","addToDOM","addDays","days","result","setDate","getDate","headerDates","i","push","length","contenu","index","value","entries","toISOString","slice","map","HoursValue","parseInt"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"@chakra-ui/button\";\r\nimport { Box, Center, Grid, GridItem } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport TimeElement from \"./timeElement\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogBody,\r\n  AlertDialogCloseButton,\r\n  AlertDialogContent,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\n// import Task from \"./taks/index\";\r\nfunction Calandre(props) {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const cancelRef = React.useRef();\r\n  const [currentDateStart, setCurrentDateStart] = useState(\"\");\r\n  const [start, setstartt] = useState(\"\");\r\n  const [end, setend] = useState(\"\");\r\n  const { rowNumber } = props;\r\n  const Hours = [\r\n    \"00:00\",\r\n    \"01:00\",\r\n    \"02:00\",\r\n    \"03:00\",\r\n    \"04:00\",\r\n    \"05:00\",\r\n    \"06:00\",\r\n    \"07:00\",\r\n    \"08:00\",\r\n    \"09:00\",\r\n    \"10:00\",\r\n    \"11:00\",\r\n    \"12:00\",\r\n    \"13:00\",\r\n    \"14:00\",\r\n    \"15:00\",\r\n    \"16:00\",\r\n    \"17:00\",\r\n    \"18:00\",\r\n    \"19:00\",\r\n    \"20:00\",\r\n    \"21:00\",\r\n    \"22:00\",\r\n    \"23:00\",\r\n  ];\r\n  const addtaks = (start, end) => {\r\n    id = id + 1;\r\n    setstartt(start);\r\n    setend(end);\r\n    setCurrentDateStart(start);\r\n    onOpen();\r\n  };\r\n  const restOfConfirmation = (start, end) => {\r\n    setTask((task) => [...task, { id, start, end }]);\r\n    onClose();\r\n  };\r\n  //to get format yyy-mm-ddThh:mm:ss\r\n  // .toISOString().slice(0, 19)\r\n\r\n  const [date] = useState(new Date());\r\n  const [task, setTask] = useState([{ start: \"2021-03-22T00:00\" }]);\r\n  let id = 0;\r\n\r\n  const addToDOM = () => {\r\n    // task.forEach((element) => console.log(element));\r\n  };\r\n  const addDays = (date, days) => {\r\n    var result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  const headerDates = [];\r\n  //make header\r\n  for (let i = 0; i < rowNumber; i++) {\r\n    i === 0\r\n      ? headerDates.push(date)\r\n      : headerDates.push(addDays(headerDates[headerDates.length - 1], 1));\r\n  }\r\n\r\n  const contenu = [];\r\n  for (const [index, value] of headerDates.entries()) {\r\n    contenu.push(\r\n      <Box>\r\n        <Center\r\n          w=\"100%\"\r\n          key={index}\r\n          border=\"1px\"\r\n          borderColor=\"gray.200\"\r\n          bgColor=\"gray.300\"\r\n          h={10}\r\n          align=\"center\"\r\n        >\r\n          {value.toISOString().slice(0, 10)}\r\n        </Center>\r\n        {Hours.map((HoursValue) => (\r\n          <TimeElement\r\n            HoursValue={HoursValue}\r\n            value={value}\r\n            addtaks={addtaks}\r\n            task={task}\r\n          />\r\n        ))}\r\n      </Box>\r\n    );\r\n  }\r\n  return (\r\n    <Box>\r\n      <Button onClick={() => addToDOM()}>ok</Button>\r\n      <Grid templateColumns=\"repeat(6, 1fr)\" gap={0}>\r\n        <GridItem colSpan={1}>\r\n          <Box w=\"100%\" bgColor=\"gray.400\">\r\n            <Center h={10} align=\"center\"></Center>\r\n            {Hours.map((value) => (\r\n              <Center\r\n                border=\"1px\"\r\n                borderColor=\"gray.200\"\r\n                bgColor=\"gray.400\"\r\n                h=\"160px\"\r\n                key={value}\r\n                fontSize=\"20px\"\r\n              >\r\n                {value}\r\n              </Center>\r\n            ))}\r\n          </Box>\r\n        </GridItem>\r\n        <GridItem colSpan={5} w=\"100%\">\r\n          <Grid\r\n            w=\"100%\"\r\n            templateColumns={\"repeat(\" + parseInt(rowNumber) + \", 1fr)\"}\r\n            gap={0}\r\n          >\r\n            {contenu}\r\n          </Grid>\r\n        </GridItem>\r\n      </Grid>\r\n      <AlertDialog\r\n        motionPreset=\"slideInBottom\"\r\n        leastDestructiveRef={cancelRef}\r\n        onClose={onClose}\r\n        isOpen={isOpen}\r\n        isCentered\r\n      >\r\n        <AlertDialogOverlay />\r\n\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>Confirmer la réservation</AlertDialogHeader>\r\n          <AlertDialogCloseButton />\r\n          <AlertDialogBody>hooo{currentDateStart}</AlertDialogBody>\r\n          <AlertDialogFooter>\r\n            <Button ref={cancelRef} onClick={onClose}>\r\n              No\r\n            </Button>\r\n            <Button\r\n              colorScheme=\"red\"\r\n              onClick={() => restOfConfirmation(start, end)}\r\n              ml={3}\r\n            >\r\n              Yes\r\n            </Button>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Calandre;\r\n"]},"metadata":{},"sourceType":"module"}